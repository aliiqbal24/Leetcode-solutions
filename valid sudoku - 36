### Notes
# check if board is valid, does not have to be full or solvable
# This means we are checking for duplicates in each row, column, 3X3 subsquare
# a set of each of these would remove any duplicates
# if we check for duplicates by creating hashsets, no dupes then the board is valid
# if not, they are invalid
# for the rows and columns the comparison is straight forward
# for the sub 3X3s we will use floor division to get the 0,2 indexing
# we can check each row, then column, then each subsquare seperately, since the board is fixed these are easily defined


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # Create lists of sets for rows and columns,
        # and a 3x3 list of sets for the sub-boxes.
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        squares = [[set() for _ in range(3)] for _ in range(3)]
        
        for i in range(9):
            for j in range(9):
                current = board[i][j]
                if current == ".":
                    continue  # Skip empty cells
                
                # Check if the digit already exists in the corresponding row, column, or square.
                if (current in rows[i] or 
                    current in cols[j] or 
                    current in squares[i // 3][j // 3]):
                    return False
                
                # Add the digit to the appropriate sets.
                rows[i].add(current)
                cols[j].add(current)
                squares[i // 3][j // 3].add(current)
        
        return True
