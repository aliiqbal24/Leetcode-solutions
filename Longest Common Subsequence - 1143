### NOTES
# we can break this into subproblems, which hints at a dynamic programming approach
# The ideal approach is a top down approach, where the start at the last letter of each text
# This can be visualised as a grid, text1 by text2, now we can compare char by char
# if the i and j are the same, we increment and can go up left diagonally, this is solving the subproblem and moving on
# likely, i and j and different, here, we don't increment, instead passing the problem both just up and just left
# continue, until at the top left, where we return the final value

# the time and space complexity both are O(n*m), we are creating and checking a n*m grid

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        dp =  [[0 for j in range(len(text2)+1)]for i in range(len(text1)+1)]

        for i in range(len(text1)-1,-1,-1):
            for j in range(len(text2)-1,-1,-1):

                if text1[i]== text2[j]:
                    dp[i][j] = 1 + dp[i+1][j+1] 
                
                else:
                    dp[i][j] = max (dp[i+1][j], dp[i][j+1])

        return dp[0][0]
