### Notes
# for 2 trees to be the same they must have the same: structure, node
# we can recursively check both trees with a dfs
# compare the roots, then go down the tree, comparing the left and right subtrees and so on
# If at any moment there is an inequality, we can immediately return false
# if the algorithm navigates the entire tree without returning false we can return false
# We must handle the edge case of an empty tree
# the big O is O(p+q) for the two trees p and q



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:

        if not p and not q:
            return True
        
        if not p or not q or p.val != q.val:
            return False

        return (self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right))
        

        
