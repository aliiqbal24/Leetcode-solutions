### NOTES
# A tree is balanced if the hieght of every subtree, of every node differs by no more than 1
# A brute for would be checking the height of each sub tree, for every node, but this is inneffiecent
# it would be an O(n^2) process, we can do better
# By Implementing a dfs, recursivly, we can check the height
# if there is ever an inbalance we can directly return false, else if the program completes, it is true
# this has a time complexity of O(N) as each node is iterated once, in the worst case


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:

        balanced = [True]

        def height(root):
            if not root:
                return 0
            
            left_height = height(root.left)

            if balanced[0] is False:
                return 0
            right_height = height(root.right)

            if abs(left_height - right_height) > 1:
                balanced[0] = False        
                return 0

            return 1 + max(left_height, right_height)

        height(root)
        return balanced[0]
