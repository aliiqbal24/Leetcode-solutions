###NOTES
# in this problem we are using a sliding window of size k, and we are returning a list of the max element of each slide
# a brute fore method is to check the max of each window, but this has unneccessary work, as only the front and back change
# to optimize, we can use a queue ADT
# this queue will be of size k, and every shift we will add elements to it
# If the element is the largest so far, we will pop all other elements
# then we can add this to our results array as this is our max, 
# we itteerate throught the entire array once, eventually storing the largest at each window
# return our result as the answer


class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        
        result = []
        q = collections.deque()
        l = r = 0
        while r < len(nums):
            while q and nums[r] > nums[q[-1]]:
                q.pop()
            q.append(r)

            if l > q[0]:
                q.popleft()

            if (r+1)>= k:
                result.append(nums[q[0]])
                l += 1
            
            r+=1
        return result


