### NOTES

# This is a multi-source BFS where all initial rotten oranges start the spread
# Count fresh oranges and queue all rotten ones at the start
# Each BFS level = 1 minute; rot adjacent fresh oranges and enqueue them
# After BFS, if fresh oranges remain, return -1; else return elapsed time
# Time complexity: O(m × n), each cell processed once
# Space complexity: O(m × n) for the BFS queue in the worst case

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        q = deque()
        fresh, time = 0,0

        ROWS, COLS = len(grid), len(grid[0])

        for r in range(ROWS):
            for c in range(COLS):
                if grid[r][c] == 1:
                    fresh += 1
                if grid[r][c] == 2:
                    q.append((r,c))

        directions = [[0,1],[0,-1],[1,0],[-1,0]]

        while q and fresh > 0: 

            for i in range(len(q)):
                r,c = q.popleft()
                for dr, dc in directions: 
                    row, col = r + dr, c + dc
                    if (row in range(len(grid)) # check bound
                        and col in range(len(grid[0])) and grid[row][col] == 1):
                        grid[row][col] = 2 # make it rotten
                        q.append((row, col))
                        fresh -= 1 
            time += 1
        return time if fresh == 0 else -1
                


        
