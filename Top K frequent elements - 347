### NOTES
# as we iterate through nums, we use a hash map with the element as the key, 
# and its frequency as the value
# we will use a min heap that organinzes the pairs, in order of frequency
# (with min freq at the top)
# By using pushpop, the minheap self organizes
# the big O of this solution if O(nlogK)
# As we it takes n operations to fill the heap 
# then logk (where k is the integer of kth most frequent element requested) 
# logk as heap is organized (min heap)
# return the list of elements of k lengths

import heapq
from collections import Counter

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:

        counter = Counter(nums)
        heap = []

        for key, val in counter.items():
            if len(heap) < k:
                heapq.heappush(heap, (val, key))
            else: 
                heapq.heappushpop(heap, (val, key))

        return [h[1] for h in heap]


        
