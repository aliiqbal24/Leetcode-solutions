### NOTES
#
# in this problem we are asked to return the moast amount of water that can be "trapped"  by array heights
# we can solve this optimally by using a two pointer approach
# initiallizing a pointer at the left and right, we move the lower height towards the middle
# we continue until they are at the same point, which at that point we have checked the entire array
# this solution is O(n) time complexity and O(1) space

class Solution:
    def maxArea(self, heights: List[int]) -> int:

        maxWater = 0

        l,r = 0, len(heights)-1 # 

        while l < r:
            currWater = min(heights[l],heights[r])* (r-l)

            maxWater = max(maxWater, currWater)

            if heights[l] < heights[r]:
                l += 1
            else:
                r -=1   

        return maxWater     
        
