### NOTES
# 
# In this problem we want to return the longest amount of repeating charachters, after an ideal replace of k chars
# A brute force option is to try every replacement orientation, for each character in the array
# this is overkill, with a time complexity of O(N^2) for the number of elements n
# Instead we can use a sliding window that grows and shrinks, as long as we are able to replace to one char
# We also need a count of the most frequent charachter per window as we will replace to this
# That is done with a hash map, where we keep track of the amount of occurence
# For the solution, we take the length of the window and subtract count of most freq char, this number is how many we need to replace
# compare this with k and if k is bigger we can grow the window, if smaller we will shrink
# continue this until the whole string is checker
# the time complexity is now O(n), 26*n which is still linear. Space O(m) where number of unique char worst case O(26) 

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        
        count = {}
        res = 0

        l = 0

        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0)

            while (r-l+1) - max(count.values()) > k:

                count[s[l]] -= 1
                l+= 1

            res = max(res, r-l+1)

        return res

