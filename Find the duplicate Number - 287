/* NOTES 
* 
* For this problem we can optimally solve with floyds cycle detection
* this is because the max an element can be is n - the lenght of the array
* so if we treat the value as the index of the next value we can go to the next value and repeat
* because there is a guaranteed duplicate, we can contintue with both fast and slow pointers until the meet
* then we start with another slow pointer, which will start at the beginning  
* when slow 1 and slow 2 meet, we can return the element at slow 1 and 2
* this is our duplicate value
*/

class Solution {
public:
    int findDuplicate(vector<int>& nums) {

        int slow = 0, fast = 0;

        while (true) {
            slow = nums[slow];
            fast = nums[nums[fast]];

            if (slow == fast){
                break;
            }

        }
        int slow2 = 0;

        while (true){
            slow = nums[slow];
            slow2 = nums[slow2];

            if (slow == slow2){
                return slow;
            }

        }

    }
};
