### NOTES
#
# For this problem, we are checking if a tree is a valid BST
# to be valid, the left subtree must have only smaller elements, while the right only has bigger
# we can recursive check if each node is within it left and right range
# initially these bounds are + - infinity
# every left node updates the right bound to itself, and right node updates left bound
# we iterate through the whole tree, until it is fully searched, or we know its invalid
# this solution is Time complexity of O(N) and space of O(N) 

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        

        def validate(node, left, right):
            if not node:
                return True
            
            if not (node.val<right and node.val>left):
                return False
            
            return (validate(node.left, left, node.val)and validate(node.right, node.val, right))
        return validate(root, float("-inf"), float("inf"))



