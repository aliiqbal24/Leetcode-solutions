### NOTES
#
# For this problem we must find out how many numeber of islands, which is same as groups of nodes that are "1" which have only "0" neighbors
# We can use a recursive BFS to check the number of islands
# this will start at 0,0 and traverse the rows and columns, if theres a zero move on
# but if theres a 1, call bfs on this, checking its neighbours, and so on, only when all neighbours of neighbours are 0s may it end
# each one of these recursions add one to the num of islands, so we get the total amount,
# A set is used to make sure that we do not revisit any islands
# the time complexity is O(n*m) -rows times colums, space complexity is the same
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
        ROWS, COLS = len(grid), len(grid[0])
        islands = 0

        def bfs(r, c):
            q = deque()
            grid[r][c] = "0"
            q.append((r, c))

            while q:
                row, col = q.popleft()  
                for dr, dc in directions:
                    nr, nc = dr + row, dc + col
                    if (nr < 0 or nc < 0 or nr >= ROWS or
                        nc >= COLS or grid[nr][nc] == "0"
                    ):
                        continue
                    q.append((nr, nc))
                    grid[nr][nc] = "0"

        for r in range(ROWS):
            for c in range(COLS):
                if grid[r][c] == "1":
                    bfs(r, c)
                    islands += 1

        return islands
